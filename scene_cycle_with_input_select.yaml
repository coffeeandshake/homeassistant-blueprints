blueprint:
  name: Daan Dobber's Scene Cycle (human input trigger)
  description: Cycles through and activates scenes with triggers focused on human input.
  domain: automation
  input:
    trigger_type:
      name: Trigger Type
      description: Type of the trigger to start the automation.
      default: webhook
      selector:
        select:
          options:
            - webhook
            - event
            - device
            - service_call
    webhook_id:
      name: Webhook ID (Only for Webhook trigger)
      description: Only fill if Trigger Type is Webhook.
      selector:
        text:
    input_select_entity:
      name: Input Select Entity
      description: The input select entity containing the scenes to cycle through.
      selector:
        entity:
          domain: input_select
    event_name:
      name: Event Name (Only for Event trigger)
      description: Only fill if Trigger Type is Event.
      selector:
        text:
    entity_id:
      name: Entity ID (Only for Device trigger)
      description: The entity ID to monitor for state changes (Only fill if Trigger Type is Device).
      selector:
        entity:
    to_state:
      name: To State (Only for Device trigger)
      description: The state which will trigger the automation (Only fill if Trigger Type is Device).
      selector:
        text:
    service_entity:
      name: Service Entity (Only for Service trigger)
      description: The entity on which the service is called (Only fill if Trigger Type is Service Call).
      selector:
        entity:
    service_name:
      name: Service Name (Only for Service trigger)
      description: The service name which will trigger the automation (Only fill if Trigger Type is Service Call).
      selector:
        text:

trigger:
  - platform: "{{ input.trigger_type }}"
    {% if input.trigger_type == 'webhook' %}
    allowed_methods:
      - POST
      - PUT
    local_only: false
    webhook_id: "{{ input.webhook_id }}"
    {% elif input.trigger_type == 'event' %}
    event_type: "{{ input.event_name }}"
    {% elif input.trigger_type == 'device' %}
    entity_id: "{{ input.entity_id }}"
    to: "{{ input.to_state }}"
    {% elif input.trigger_type == 'service_call' %}
    entity_id: "{{ input.service_entity }}"
    service: "{{ input.service_name }}"
    {% endif %}

condition: []
action:
  - service: input_select.select_next
    data:
      cycle: true
    target:
      entity_id: !input input_select_entity
  - variables:
      input_select: !input input_select_entity
      selected_scene: "{{ states(input_select) }}"
  - service: scene.turn_on
    data:
      entity_id: "{{ selected_scene }}"
mode: restart
